head	1.6;
access;
symbols;
locks;
comment	@ * @;


1.6
date	2014.03.12.22.52.07;	author -;	state -;
branches;
next	1.5;

1.5
date	2014.03.12.17.02.19;	author -;	state -;
branches;
next	1.4;

1.4
date	2014.03.12.17.01.35;	author -;	state -;
branches;
next	1.3;

1.3
date	2014.03.12.00.29.13;	author -;	state -;
branches;
next	1.2;

1.2
date	2014.03.10.20.54.19;	author -;	state -;
branches;
next	1.1;

1.1
date	2014.03.10.20.52.09;	author -;	state -;
branches;
next	;


desc
@@


1.6
log
@-
@
text
@// $Id: linesort.c,v 1.5 2014-03-12 10:02:19-07 - - $

// NAME
//    Linesort - sorts lines from stdin in array

#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include "inssort.h"

int exit_status = EXIT_SUCCESS;

int strstrcmp (const void *this, const void *that) {
  char **thisstr = (char**) this;
  char **thatstr = (char**) that;
  return strcmp (*thisstr, *thatstr);
}

int main () {
  int x;
  char* array[1000]; //array of 1000 char pointers
  char buffer[1000]; // input buffer

  for (x=0; x < 999; ++x) {
    char *gotline = fgets (buffer, sizeof (buffer), stdin);
    if (gotline == NULL) break;
    char *nlpos = strchr (buffer, '\n');
    if (nlpos != NULL) {
      *nlpos = '\0';
    }
    array[x] = strdup (buffer);
    printf ("Line: %s\n", array[x]);
  }
  // qsort (&array[0], x, sizeof (char *), strstrcmp);
  inssort (array, x, sizeof (char *), strstrcmp);
  for (int i=0; i<x; ++i){
    printf ("%s\n",array[i]);
  }
  return exit_status;
}
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.4 2014-03-12 10:01:35-07 - - $
d10 2
d20 1
a20 1
int main (int argc, char **argv) {
d35 2
a36 2
  qsort (&array[0], x, sizeof (char *), strstrcmp);

@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.3 2014-03-11 17:29:13-07 - - $
d31 1
a31 1
    printf ("Line: %s\n", &array[x]);
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.2 2014-03-10 13:54:19-07 - - $
a9 2
#include "inssort.h"

d19 1
d23 6
a28 4
  for (int linenr = 1;; ++linenr) {
    if (array[1000] != NULL) {
      printf ("Array is full");
      break;
d30 7
a36 10
    char *gotline = fgets (buffer, sizeof buffer, stdin);
    array[linenr] = strdup (gotline);
  };
  const size_t nelem = sizeof array / sizeof *array;

  // Pass numbers to inssort
  qsort (array, nelem, sizeof *array, strstrcmp);
  // Print numbers
  for (size_t itor = 0; itor < nelem; ++itor) {
    printf ("%s\n", array[itor]);
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: linesort.c,v 1.1 2014-03-10 13:52:09-07 - - $
d40 1
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id$
d30 1
a30 1
    array[linenr] = strdup (gotline, sizeof gotline);
@
