Script started on Wed 19 Feb 2014 05:06:02 PM PST
You are currently using 0% (257.0 KiB) of your 488.3 MiB quota.
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ mk uninit.c 
CSOURCE=uninit.c EXECBIN=uninit
+ cid + uninit.c
+ checksource uninit.c
+ gcc -g -O0 -Wall -Wextra -std=gnu99 uninit.c -o uninit -lm
uninit.c: In function â€˜mainâ€™:
uninit.c:6:15: warning: unused parameter â€˜argcâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
               ^
uninit.c:6:28: warning: unused parameter â€˜argvâ€™ [-Wunused-parameter]
 int main (int argc, char **argv) {
                            ^
uninit.c:8:11: warning: â€˜pointerâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("pointer=%p\n", pointer);
           ^
uninit.c:11:11: warning: â€˜fooâ€™ is used uninitialized in this function [-Wuninitialized]
    printf ("foo=%d\n", foo);
           ^
+ set +x
============================================================
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ valgrind uni
uninit*   uninit.c  
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ valgrind uninit
==9123== Memcheck, a memory error detector
==9123== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==9123== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==9123== Command: uninit
==9123== 
==9123== Conditional jump or move depends on uninitialised value(s)
==9123==    at 0x3753645948: vfprintf (vfprintf.c:1640)
==9123==    by 0x375364F449: printf (printf.c:35)
==9123==    by 0x400544: main (uninit.c:8)
==9123== 
pointer=(nil)
==9123== Use of uninitialised value of size 8
==9123==    at 0x400549: main (uninit.c:9)
==9123== 
==9123== Invalid read of size 4
==9123==    at 0x400549: main (uninit.c:9)
==9123==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==9123== 
==9123== 
==9123== Process terminating with default action of signal 11 (SIGSEGV)
==9123==  Access not within mapped region at address 0x0
==9123==    at 0x400549: main (uninit.c:9)
==9123==  If you believe this happened as a result of a stack
==9123==  overflow in your program's main thread (unlikely but
==9123==  possible), you can try to increase the size of the
==9123==  main thread stack using the --main-stacksize= flag.
==9123==  The main thread stack size used in this run was 10485760.
==9123== 
==9123== HEAP SUMMARY:
==9123==     in use at exit: 0 bytes in 0 blocks
==9123==   total heap usage: 0 allocs, 0 frees, 0 bytes allocated
==9123== 
==9123== All heap blocks were freed -- no leaks are possible
==9123== 
==9123== For counts of detected and suppressed errors, rerun with: -v
==9123== Use --track-origins=yes to see where uninitialised values come from
==9123== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 6 from 6)
Segmentation fault (core dumped)
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ echo$[K $?
139
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ pstatus 139
pstatus: 0x008B TERMINATED 11: Segmentation fault (core dumped)
]0;vispatel@unix2:lab5[vispatel@unix2 lab5]$ exit
exit

Script done on Wed 19 Feb 2014 05:06:44 PM PST
