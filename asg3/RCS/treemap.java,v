head    1.1;
access;
symbols;
locks; strict;
comment    @# @;


1.1
date    2014.02.17.00.07.32;    author vispatel;    state -;
branches;
next    ;


desc
@@


1.1
log
@-
@
text
@// $Id$

import static java.lang.System.*;

class treemap <key_t extends Comparable <key_t>, value_t> {

    private class node {
    key_t key;
    value_t value;
    node left;
    node right;
    }
    private node root;

    private void debug_dump_rec (node tree, int depth) {
    if(tree == null) return;
    debug_dump_rec(tree.left, depth+1);
    out.printf("%d %s %s %n", depth, tree.key, tree.value);
    debug_dump_rec(tree.right, depth+1);  
    }

    private void do_visit_rec (visitor <key_t, value_t> visit_fn,
                   node tree) {
    if(tree == null) return;
    do_visit_rec(visit_fn, tree.left);
    visit_fn.visit(tree.key, tree.value);
    do_visit_rec(visit_fn, tree.right);
    }

    public value_t get (key_t key) {
    node curr = root;
    while (curr != null){
        int cmp = curr.key.compareTo(key);
        if(cmp == 0){
        return curr.value;
        }
        if(cmp < 0) curr = curr.right;
        else curr = curr.left;
    }
    return null;
    }

    public value_t put (key_t key, value_t value) {
    node curr = root;
    while (curr != null){
        int cmp = curr.key.compareTo(key);
        if(cmp ==  0){
        value_t oldvalue = curr.value;
        curr.value = value;
        return oldvalue;   
        }
        if (cmp < 0) curr = curr.right;
        else curr = curr.left;
    }
    curr = new node();
    curr.key = key;
    curr.value = value;
    return null;
    }

    public void debug_dump () {
    debug_dump_rec (root, 0);
    }

    public void do_visit (visitor <key_t, value_t> visit_fn) {
    do_visit_rec (visit_fn, root);
    }

}
@
